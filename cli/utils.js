const fs = require("fs-extra");
const path = require("path");

/**
 * Copy a template directory to target and update package.json with projectName.
 * @param {string} sourceDir
 * @param {string} targetDir
 * @param {string} projectName (optional) - will override package.json name if present
 */
async function copyTemplate(sourceDir, targetDir, projectName) {
  try {
    if (!sourceDir || !targetDir) {
      throw new Error("Source and target directories are required.");
    }

    // ensure source exists
    const exists = await fs.pathExists(sourceDir);
    if (!exists) {
      throw new Error(`Template not found: ${sourceDir}`);
    }

    // copy
    await fs.copy(sourceDir, targetDir, {
      overwrite: false,
      errorOnExist: true,
    });

    // try update package.json in the copied template
    const pkgPath = path.join(targetDir, "package.json");
    const pkgExists = await fs.pathExists(pkgPath);
    if (pkgExists && projectName) {
      try {
        const raw = await fs.readFile(pkgPath, "utf8");
        const pkg = JSON.parse(raw);
        // set sensible defaults for created project
        pkg.name = projectName;
        if (!pkg.version) pkg.version = "0.1.0";
        if (!pkg.description)
          pkg.description = `${projectName} - generated by Kaelum CLI`;
        // ensure type commonjs by default for templates that expect require/module.exports
        if (!pkg.type) pkg.type = "commonjs";
        await fs.writeFile(pkgPath, JSON.stringify(pkg, null, 2), "utf8");
      } catch (e) {
        // non-fatal: warn but continue
        console.warn(
          "Warning: failed to update package.json in the template:",
          e.message
        );
      }
    }

    return { ok: true };
  } catch (err) {
    return { ok: false, error: err.message || String(err) };
  }
}

module.exports = { copyTemplate };