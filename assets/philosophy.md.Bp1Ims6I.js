import{_ as i,c as a,o as s,ak as t}from"./chunks/framework.DALqws9A.js";const u=JSON.parse('{"title":"Philosophy","description":"","frontmatter":{},"headers":[],"relativePath":"philosophy.md","filePath":"philosophy.md"}'),n={name:"philosophy.md"};function o(l,e,r,p,d,c){return s(),a("div",null,[...e[0]||(e[0]=[t(`<h1 id="philosophy" tabindex="-1">Philosophy <a class="header-anchor" href="#philosophy" aria-label="Permalink to &quot;Philosophy&quot;">​</a></h1><p>Kaelum is intentionally minimal, pragmatic and community-oriented. This document explains the ideas and design principles that guided the framework, the intended audience and use cases, and how we hope Kaelum will fit into the wider open-source ecosystem.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>Kaelum aims to reduce the friction of starting web and API projects with Node.js by providing a small, well-documented abstraction on top of Express. Instead of hiding Express completely, Kaelum:</p><ul><li><strong>Encapsulates</strong> common setup steps (body parsing, static serving, security middlewares),</li><li><strong>Abstracts</strong> repetitive boilerplate (routes, templates, CLI scaffolding), and</li><li><strong>Automates</strong> everyday defaults so beginners can focus on application logic.</li></ul><p>The goal is not to replace Express for every use case, but to speed up learning and prototyping while preserving the flexibility needed for production work.</p><h2 id="core-design-principles" tabindex="-1">Core design principles <a class="header-anchor" href="#core-design-principles" aria-label="Permalink to &quot;Core design principles&quot;">​</a></h2><h3 id="_1-encapsulate-don-t-obstruct" tabindex="-1">1. Encapsulate, don’t obstruct <a class="header-anchor" href="#_1-encapsulate-don-t-obstruct" aria-label="Permalink to &quot;1. Encapsulate, don’t obstruct&quot;">​</a></h3><p>Kaelum intentionally wraps common Express behaviors into small, composable helpers (<code>start</code>, <code>addRoute</code>, <code>apiRoute</code>, <code>setConfig</code>, etc.). These helpers simplify the usual bootstrapping steps while leaving an escape hatch to access the raw Express <code>app</code> when the developer needs advanced control.</p><h3 id="_2-sensible-defaults-explicit-opt-in-controls" tabindex="-1">2. Sensible defaults, explicit opt-in controls <a class="header-anchor" href="#_2-sensible-defaults-explicit-opt-in-controls" aria-label="Permalink to &quot;2. Sensible defaults, explicit opt-in controls&quot;">​</a></h3><p>Defaults should make the common path easier (JSON parsing, static <code>public</code> folder, simple HTTP logging option), but advanced behavior must remain available. Kaelum provides <code>setConfig()</code> and <code>setMiddleware()</code> so users can enable, disable or replace behavior explicitly.</p><h3 id="_3-minimal-surface-area" tabindex="-1">3. Minimal surface area <a class="header-anchor" href="#_3-minimal-surface-area" aria-label="Permalink to &quot;3. Minimal surface area&quot;">​</a></h3><p>A small API surface reduces cognitive load for beginners. Each exported helper has a focused responsibility so the learning path is short and predictable.</p><h3 id="_4-progressive-disclosure" tabindex="-1">4. Progressive disclosure <a class="header-anchor" href="#_4-progressive-disclosure" aria-label="Permalink to &quot;4. Progressive disclosure&quot;">​</a></h3><p>Start simple: generate a working app with <code>npx kaelum create my-app</code>. As users grow, they can explore the internals, replace defaults, and extend the app without rewiring everything.</p><h3 id="_5-composition-friendly" tabindex="-1">5. Composition-friendly <a class="header-anchor" href="#_5-composition-friendly" aria-label="Permalink to &quot;5. Composition-friendly&quot;">​</a></h3><p>Kaelum favors composition over convention. It is intentionally <em>unopinionated</em> about templating engines, ORMs or deployment strategies. This keeps the framework useful across many small projects and educational settings.</p><h2 id="intended-audience-use-cases" tabindex="-1">Intended audience &amp; use cases <a class="header-anchor" href="#intended-audience-use-cases" aria-label="Permalink to &quot;Intended audience &amp; use cases&quot;">​</a></h2><p>Kaelum is designed for:</p><ul><li><strong>Students and beginners</strong> who need a low-friction setup to learn web concepts (routes, middleware, HTTP methods) without spending hours on configuration.</li><li><strong>Instructors and workshops</strong> who want reproducible scaffolds to demonstrate patterns and examples.</li><li><strong>Developers who prototype</strong> — Kaelum provides a fast path to a working app so ideas can be validated quickly.</li><li><strong>Experienced developers</strong> who want a compact starter for small services or experiments; Kaelum does not prevent stepping down to raw Express when needed.</li></ul><p>Typical use cases:</p><ul><li>Classroom exercises and tutorials.</li><li>Rapid prototypes and internal tools.</li><li>Small production services where a compact, well-understood stack is preferable.</li></ul><h2 id="educational-goals" tabindex="-1">Educational goals <a class="header-anchor" href="#educational-goals" aria-label="Permalink to &quot;Educational goals&quot;">​</a></h2><p>Kaelum was built with teaching in mind. Key educational intentions:</p><ul><li>Make it easy to explain WHAT is happening (routes, middleware, request/response life cycle) without distractions from setup.</li><li>Provide clear examples and templates (Web and API) that reflect good practices (MVC structure, separation of concerns).</li><li>Encourage experimentation: students can replace Kaelum defaults with raw Express code and observe the differences.</li></ul><h2 id="open-source-community-ethics" tabindex="-1">Open source, community &amp; ethics <a class="header-anchor" href="#open-source-community-ethics" aria-label="Permalink to &quot;Open source, community &amp; ethics&quot;">​</a></h2><p>Kaelum is released under the MIT license and embraces open-source values:</p><ul><li><strong>Transparency:</strong> code and decision history are public on GitHub.</li><li><strong>Collaboration:</strong> contributions are welcome (issues, PRs, docs, examples).</li><li><strong>Reuse:</strong> Kaelum is intentionally permissive so other projects can build on top of it.</li></ul><p>We believe tools that lower the barrier to entry benefit the wider community — teaching more people to build software and creating more fertile ground for future innovations.</p><h2 id="frameworks-on-top-of-kaelum" tabindex="-1">Frameworks on top of Kaelum <a class="header-anchor" href="#frameworks-on-top-of-kaelum" aria-label="Permalink to &quot;Frameworks on top of Kaelum&quot;">​</a></h2><p>Kaelum is small by design and can serve as a foundation:</p><ul><li>Developers or teams can build <em>opinionated</em> layers on top of Kaelum (authentication stacks, batteries-included admin UI, multi-tenant scaffolds) without reinventing the bootstrapping logic.</li><li>A small ecosystem of plugins or starter kits that rely on Kaelum could emerge, similar to how many projects build on Express.</li></ul><p>If you want to design a framework on top of Kaelum, consider:</p><ul><li>Publishing as an npm package that depends on <code>kaelum</code>.</li><li>Providing CLI templates that <code>npx kaelum create</code> can scaffold or extend.</li><li>Following semantic versioning and clear migration notes so downstream projects remain stable.</li></ul><h2 id="rapid-prototyping-productivity" tabindex="-1">Rapid prototyping &amp; productivity <a class="header-anchor" href="#rapid-prototyping-productivity" aria-label="Permalink to &quot;Rapid prototyping &amp; productivity&quot;">​</a></h2><p>Kaelum accelerates prototyping:</p><ul><li>A CLI scaffold produces a working project in seconds.</li><li><code>addRoute</code> and <code>apiRoute</code> reduce boilerplate for resource endpoints.</li><li>Built-in toggles for CORS, Helmet and request logging let you enable sensible defaults with a single call.</li></ul><p><strong>Minimal example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app.js (Kaelum)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> kaelum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;kaelum&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kaelum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello from Kaelum!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>This compact form demonstrates the intention: fewer lines to a working app while keeping full control available.</p><h2 id="trade-offs-and-limitations" tabindex="-1">Trade-offs and limitations <a class="header-anchor" href="#trade-offs-and-limitations" aria-label="Permalink to &quot;Trade-offs and limitations&quot;">​</a></h2><p>Every abstraction brings trade-offs:</p><ul><li>Kaelum intentionally does <strong>not</strong> hide Express — so users still need to learn Express concepts eventually.</li><li>Some advanced production patterns (complex middleware ordering, low-level server tuning) may require dropping to native Express APIs.</li><li>Because Kaelum aims to be tiny, not every advanced convenience will be implemented; instead, Kaelum focuses on a reliable core and extensibility.</li></ul><h2 id="contribution-governance-and-code-hygiene" tabindex="-1">Contribution, governance and code hygiene <a class="header-anchor" href="#contribution-governance-and-code-hygiene" aria-label="Permalink to &quot;Contribution, governance and code hygiene&quot;">​</a></h2><p>To sustain Kaelum we encourage:</p><ul><li>Clear contribution guidelines (issue templates, PR checklist).</li><li>Automated testing for core helpers.</li><li>Consistent documentation (API reference and examples).</li><li>Semantic versioning for predictable upgrades.</li></ul><p>If you contribute, please follow the repository’s CONTRIBUTING guidelines and add tests for behavioral changes.</p><h2 id="future-directions" tabindex="-1">Future directions <a class="header-anchor" href="#future-directions" aria-label="Permalink to &quot;Future directions&quot;">​</a></h2><p>Planned or possible enhancements (non-exhaustive):</p><ul><li><strong>Auth helpers</strong> (pluggable JWT middleware &amp; examples).</li><li><strong>Validation helpers</strong> (lightweight request validation utilities).</li><li><strong>Plugin system</strong> so third-party extensions can register options and templates.</li><li><strong>Better docs &amp; examples</strong> (live demos, playgrounds, VitePress site).</li><li><strong>TypeScript typings</strong> and optional TypeScript templates.</li><li><strong>Community templates</strong> for common stacks (database, auth providers, serverless).</li></ul><p>All of these are subject to prioritization by contributors and the community.</p><h2 id="see-also" tabindex="-1">See also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See also&quot;">​</a></h2><ul><li><a href="/kaelum/getting-started.html">Getting Started</a> — practical bootstrapping and first steps.</li><li><a href="/kaelum/guides/features.html">Guide: Features</a> — detailed behavior and examples for Kaelum helpers.</li><li><a href="/kaelum/api/start.html">API Reference</a> — function reference for <code>start</code>, <code>addRoute</code>, <code>setConfig</code>, etc.</li><li>GitHub repository: <code>https://github.com/MatheusCampagnolo/kaelum</code></li></ul>`,53)])])}const m=i(n,[["render",o]]);export{u as __pageData,m as default};
