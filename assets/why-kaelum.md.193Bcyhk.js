import{_ as i,c as a,o as e,ak as t}from"./chunks/framework.DALqws9A.js";const c=JSON.parse('{"title":"Why Kaelum?","description":"","frontmatter":{},"headers":[],"relativePath":"why-kaelum.md","filePath":"why-kaelum.md"}'),n={name:"why-kaelum.md"};function l(r,s,h,o,p,d){return e(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="why-kaelum" tabindex="-1">Why Kaelum? <a class="header-anchor" href="#why-kaelum" aria-label="Permalink to &quot;Why Kaelum?&quot;">​</a></h1><h2 id="name-inspiration" tabindex="-1">Name &amp; inspiration <a class="header-anchor" href="#name-inspiration" aria-label="Permalink to &quot;Name &amp; inspiration&quot;">​</a></h2><p><strong>Kaelum</strong> is inspired by the Latin word <em>caelum</em> (sky, heaven). The name evokes two closely related ideas:</p><ul><li><strong>Clarity and elevation</strong> — reduce noise and let developers focus on the important parts of an application, elevating the learning and prototyping experience.</li><li><strong>A small, steady platform</strong> — a lightweight foundation you can build on, similar to how a clear sky is a simple but essential backdrop.</li></ul><p>Kaelum was designed to be a compact layer above Express: small, pragmatic and easy to adopt, while remaining flexible for advanced uses.</p><h2 id="problems-kaelum-aims-to-solve" tabindex="-1">Problems Kaelum aims to solve <a class="header-anchor" href="#problems-kaelum-aims-to-solve" aria-label="Permalink to &quot;Problems Kaelum aims to solve&quot;">​</a></h2><p>Developers — especially beginners and students — commonly face recurring friction when starting Node.js web projects:</p><ul><li><strong>Heavy initial setup</strong>: configuring parsers, static serving, security middleware, route scaffolding and project structure takes time and distracts from application logic.</li><li><strong>Boilerplate duplication</strong>: many small projects repeat the same wiring (body parsers, static folders, logging).</li><li><strong>Steep cognitive load for beginners</strong>: newcomers must learn many independent tools (Express middleware, project layout, npm scripts) before writing a single route.</li><li><strong>Inconsistent starter templates</strong>: different tutorials recommend different layouts, which confuses learners.</li></ul><p>Kaelum reduces this friction by providing an opinionated <em>minimal</em> starter surface while keeping escape hatches to raw Express for advanced control.</p><h2 id="relationship-with-express-and-other-frameworks" tabindex="-1">Relationship with Express and other frameworks <a class="header-anchor" href="#relationship-with-express-and-other-frameworks" aria-label="Permalink to &quot;Relationship with Express and other frameworks&quot;">​</a></h2><h3 id="kaelum-express" tabindex="-1">Kaelum &amp; Express <a class="header-anchor" href="#kaelum-express" aria-label="Permalink to &quot;Kaelum &amp; Express&quot;">​</a></h3><p>Kaelum <strong>builds on top of Express</strong> rather than replacing it. Key aspects of this relationship:</p><ul><li>Kaelum <strong>encapsulates</strong> common Express setup (parsers, static serving, CORS, Helmet, logging) into a compact API (<code>createApp()</code>, <code>start()</code>, <code>addRoute()</code>, <code>setConfig()</code>).</li><li>The underlying Express <code>app</code> is still available — you can call <code>app.use()</code>, <code>app.listen()</code> or any Express API when needed.</li><li>This approach gives the best of both worlds: <strong>simplicity for quick starts</strong> and <strong>full flexibility</strong> for production-grade adjustments.</li></ul><h3 id="comparison-with-other-projects" tabindex="-1">Comparison with other projects <a class="header-anchor" href="#comparison-with-other-projects" aria-label="Permalink to &quot;Comparison with other projects&quot;">​</a></h3><ul><li><strong>Express</strong> — Very minimal; Kaelum uses Express as runtime and exposes simpler helpers and a CLI scaffold.</li><li><strong>Fastify</strong> — Focused on performance and schema-based validation; Kaelum’s goal is developer ergonomics and education rather than micro-benchmarks.</li><li><strong>NestJS</strong> — Highly opinionated, modular architecture with TypeScript-first design; Kaelum intentionally remains lightweight and unopinionated about controllers/DI to keep the barrier low.</li><li><strong>Create React App / Vite scaffolding</strong> — Kaelum’s CLI (<code>npx kaelum create</code>) is inspired by the idea of quick scaffolding — generate a working project with sensible defaults and an easy path to customization.</li></ul><h2 id="different-whys-—-reasons-to-choose-kaelum" tabindex="-1">Different “Whys” — reasons to choose Kaelum <a class="header-anchor" href="#different-whys-—-reasons-to-choose-kaelum" aria-label="Permalink to &quot;Different “Whys” — reasons to choose Kaelum&quot;">​</a></h2><h3 id="_1-for-learning-and-teaching" tabindex="-1">1. For learning and teaching <a class="header-anchor" href="#_1-for-learning-and-teaching" aria-label="Permalink to &quot;1. For learning and teaching&quot;">​</a></h3><ul><li>Short, predictable API helps instructors demonstrate web fundamentals without the distraction of tooling.</li><li>Pre-configured templates and examples let students run code immediately and focus on HTTP concepts.</li></ul><h3 id="_2-for-rapid-prototyping" tabindex="-1">2. For rapid prototyping <a class="header-anchor" href="#_2-for-rapid-prototyping" aria-label="Permalink to &quot;2. For rapid prototyping&quot;">​</a></h3><ul><li>Start a working web or API project in seconds (<code>npx kaelum create my-app</code>), then iterate.</li><li>Useful for demos, hacks, and proof-of-concept microservices where speed matters.</li></ul><h3 id="_3-for-small-production-services" tabindex="-1">3. For small production services <a class="header-anchor" href="#_3-for-small-production-services" aria-label="Permalink to &quot;3. For small production services&quot;">​</a></h3><ul><li>The lightweight surface is suitable for internal tools and microservices where a compact, readable codebase matters.</li><li>When more control is required, the developer steps down to Express without rewriting the app.</li></ul><h3 id="_4-for-extensibility-and-ecosystem" tabindex="-1">4. For extensibility and ecosystem <a class="header-anchor" href="#_4-for-extensibility-and-ecosystem" aria-label="Permalink to &quot;4. For extensibility and ecosystem&quot;">​</a></h3><ul><li>Kaelum is intentionally composable: you can create opinionated layers (authentication stacks, admin kits) <em>on top</em> of Kaelum.</li><li>Its permissive license and small API make it easy to adopt as a dependency for higher-level tooling.</li></ul><h2 id="design-decisions-that-support-the-why" tabindex="-1">Design decisions that support the “why” <a class="header-anchor" href="#design-decisions-that-support-the-why" aria-label="Permalink to &quot;Design decisions that support the “why”&quot;">​</a></h2><ul><li><strong>Sensible defaults</strong>: JSON parsing and a <code>public/</code> static folder are enabled by default so apps work immediately.</li><li><strong>Single point of configuration</strong>: <code>setConfig()</code> gives a single place to toggle CORS, Helmet, logs, static folder and more.</li><li><strong>Small API surface</strong>: a handful of helpers (<code>createApp</code>, <code>start</code>, <code>addRoute</code>, <code>apiRoute</code>, <code>setMiddleware</code>, <code>setConfig</code>) keeps learning friction low.</li><li><strong>CLI-driven scaffolding</strong>: <code>npx kaelum create</code> produces a ready-to-run structure using MVC conventions to teach best practices.</li><li><strong>No strong opinions beyond defaults</strong>: Kaelum avoids bundling ORM, template engine or deployment choices — leaving these to the developer.</li></ul><h2 id="example-why-the-api-is-compact" tabindex="-1">Example: Why the API is compact <a class="header-anchor" href="#example-why-the-api-is-compact" aria-label="Permalink to &quot;Example: Why the API is compact&quot;">​</a></h2><p><strong>Express (typical minimal app)</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// express-app.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> express</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;express&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cors&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> helmet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;helmet&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> express</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helmet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;public&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello Express!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Listening on 3000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><p><strong>Kaelum (equivalent in fewer lines)</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app.js (Kaelum)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> kaelum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;kaelum&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kaelum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ cors: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, helmet: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// safe defaults in one call</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello Kaelum!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>The Kaelum example demonstrates the central idea: reduce wiring and let developers declare intent.</p><h2 id="when-not-to-choose-kaelum" tabindex="-1">When <strong>not</strong> to choose Kaelum <a class="header-anchor" href="#when-not-to-choose-kaelum" aria-label="Permalink to &quot;When **not** to choose Kaelum&quot;">​</a></h2><p>Kaelum intentionally targets small to medium projects, education and prototyping. Consider other solutions if you need:</p><ul><li>Heavy architectural patterns out-of-the-box (e.g., NestJS with DI and modules).</li><li>Maximum HTTP throughput and schema-driven JSON serialization as a primary concern (Fastify may be preferable).</li><li>A full-stack opinionated platform with SSR and routing built-in (Next.js, Nuxt).</li></ul><h2 id="migration-interoperability" tabindex="-1">Migration &amp; interoperability <a class="header-anchor" href="#migration-interoperability" aria-label="Permalink to &quot;Migration &amp; interoperability&quot;">​</a></h2><p>Because Kaelum relies on Express under the hood:</p><ul><li>You can migrate an Express app to Kaelum incrementally by replacing setup code with Kaelum helpers.</li><li>Existing Express middleware still works with Kaelum apps.</li><li>Kaelum projects can adopt third-party Express tools (templating engines, ORMs, validators) without friction.</li></ul><h2 id="concluding-notes" tabindex="-1">Concluding notes <a class="header-anchor" href="#concluding-notes" aria-label="Permalink to &quot;Concluding notes&quot;">​</a></h2><p>Kaelum’s mission is pragmatic: provide a small, well-documented foundation that helps learners and engineers get productive fast — without hiding the underlying platform. It is best understood as a <strong>starter scaffold + ergonomic helpers</strong> for Express, optimized for education, prototypes and small services, and intentionally designed to be extended.</p><h2 id="see-also" tabindex="-1">See also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See also&quot;">​</a></h2><ul><li><a href="/kaelum/getting-started.html">Getting Started</a> — how to scaffold and run your first Kaelum app.</li><li><a href="/kaelum/guides/features.html">Guide: Features</a> — detailed explanations and examples for Kaelum helpers.</li><li><a href="/kaelum/philosophy.html">Philosophy</a> — design principles and community goals.</li><li>Express: <a href="https://expressjs.com/" target="_blank" rel="noreferrer">https://expressjs.com/</a></li><li>Create React App inspiration: <a href="https://create-react-app.dev/" target="_blank" rel="noreferrer">https://create-react-app.dev/</a></li><li>GitHub repo: <code>https://github.com/MatheusCampagnolo/kaelum</code></li></ul>`,42)])])}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
